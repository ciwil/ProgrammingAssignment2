{
    "contents" : "# This second programming assignment will require you to write\n# an R function is able to cache potentially time-consuming \n# computations. For example, taking the mean of a numeric vector \n# is typically a fast operation. However, for a very long vector, \n# it may take too long to compute the mean, especially if it has to be \n# computed repeatedly (e.g. in a loop). If the contents of a vector are not changing, \n# it may make sense to cache the value of the mean so that when we need it again, \n# it can be looked up in the cache rather than recomputed.\n\n# In this Programming Assignment will take advantage of the scoping rules\n# of the R language and how they can be manipulated to preserve state \n# inside of an R object.\n\n# This function receives a invertible matrix and returns a vector \n# which is a 4 elements list matrix, \n# your inverse initially NULL, \n# and 4 functions to set or get any of the two matrices\n\nmakeCacheMatrix <- function(x = matrix()) {\n  inv<-NULL\n  # Function set:\n  set <- function(y) {\n    x<<-y\n    inv<<-NULL\n  }\n  # Function get:\n  get <-function(y) x\n  # Function setinv:\n  setinverse <- function(inverse) inv <<-inverse\n  # Function getinv:\n  getinverse <- function() inv\n  # The list holding the four functions:\n  list(set=set, \n       get=get, \n       setinverse=setinverse, \n       getinverse=getinverse)\n}\n\n# This function receives a makeCacheMatrix\n# if the inverse is not cached, calculates it and stores this result on makeCacheMatrix\n# and then returns the inverse.\n# If cached prints a message and returns the inverse matrix.\n\ncacheSolve <- function(x, ...) {\n  # Return an inverted matrix from cache memory\n  # (empty if a new original matrix has been created):\n  inv<-x$getinverse()\n  #If the inverse matrix is NOT empty then:\n  if(!is.null(inv)){\n    message(\"getting cached inverse\")\n    return(inv)\n  }\n  # If the inverse matrix IS empty then:\n  # Calls the original matrix from cache memory:\n  invmatrix<-x$get()\n  # Creates an inverse matrix:\n  inv<-solve(invmatrix)\n  x$setinverse(inv)\n  inv\n}",
    "created" : 1402758907308.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1739474189",
    "id" : "F6B76387",
    "lastKnownWriteTime" : 1402761943,
    "path" : "/media/DyskC/Documents and Settings/Ciwil/Documents/Coursera/R_programming/PA2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}